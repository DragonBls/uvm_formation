`ifndef FIFO_IN_DRIVER_SV
`define FIFO_IN_DRIVER_SV

class fifo_in_driver extends uvm_driver #(fifo_in_item);

  `uvm_component_utils(fifo_in_driver)

  virtual fifo_in_if vif;

  fifo_in_config     m_config;

  extern function new(string name, uvm_component parent);

  // Methods run_phase and do_drive generated by setting driver_inc in file ./fifo_in.tpl
  extern task run_phase(uvm_phase phase);
  extern task do_drive();

endclass : fifo_in_driver 


function fifo_in_driver::new(string name, uvm_component parent);
  super.new(name, parent);
endfunction : new


task fifo_in_driver::run_phase(uvm_phase phase);
  `uvm_info(get_type_name(), "run_phase", UVM_HIGH)
  vif.cb_drv.data_in_vld <= 0;
  vif.cb_drv.data_in <= 32'hxxxx;

  @(vif.cb_drv)
  forever
  begin
    seq_item_port.get_next_item(req);
      `uvm_info(get_type_name(), {"req item\n",req.sprint}, UVM_HIGH)
    do_drive();
    seq_item_port.item_done();
  end
endtask : run_phase

task fifo_in_driver::do_drive();

	repeat(req.delay) begin
		@(vif.cb_drv);
	end
	vif.cb_drv.data_in <= req.data;
	vif.cb_drv.data_in_vld <= 1;
 	
	do begin
		@(vif.cb_drv);
	end while(vif.cb_drv.data_in_rdy != 1);
	vif.cb_drv.data_in_vld <= 0;
	vif.cb_drv.data_in <= 32'hxxxx;

endtask: do_drive

// Start of inlined include file generated_tb/tb/include/dummy.sv
// End of inlined include file

`endif // FIFO_IN_DRIVER_SV

